[[_rebasing]]
=== Rebasing

(((rebasing)))
Trong Git, có hai cách chính để tích hợp các thay đổi từ nhánh này vào nhánh khác: đó là `merge` và `rebase`.
Trong phần này bạn sẽ được tìm hiểu rebase là gì, sử dụng nó như thế nào, tại sao nó được coi là một công cụ khá tuyệt vời, và trong trường hợp nào thì không nên sử dụng nó.

==== Cơ Bản về Rebase

Nếu bạn xem lại ví dụ trước trong phần Tích Hợp (<<_basic_merging>>), bạn có thể thấy rằng bạn đã phân nhánh công việc của bạn và thực hiện commit trên hai nhánh khác nhau.

.Simple divergent history
image::images/basic-rebase-1.png[Simple divergent history.]

Cách đơn giản nhất để tích hợp các nhánh, như chúng ta đã đề cập từ trước, đó là lệnh `merge`. 
Nó thực hiện tích hợp 3-chiều giữa hai snapshot mới nhất của hai nhánh (C3 và C4) và cha chung gần nhất của cả hai (C2), tạo mới một snapshot khác (và commit).

.Merging to integrate diverged work history
image::images/basic-rebase-2.png[Merging to integrate diverged work history.]

Tuy nhiên, còn có một cách khác: bạn có thể sử dụng bản vá của thay đổi được đưa ra ở C3 và áp dụng nó lên trên C4.
Trong Git, đây được gọi là _rebasing_. 
Bằng cách sử dụng lệnh `rebase`, bạn có thể sử dụng tất cả các thay đổi được commit ở một nhánh và "chạy lại" (replay) chúng trên một nhánh khác.(((git commands, rebase)))

Trong ví dụ này, bạn thực hiện như sau:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Nó thực hiện bằng cách đi tới commit cha chung của hai nhánh (nhánh bạn đang làm việc và nhánh bạn đang muốn rebase), tìm sự khác biệt trong mỗi commit của nhánh mà bạn đang làm việc, lưu lại các thay đổi đó vào một tập tin tạm thời, khôi phục lại nhánh hiện tại về cùng một commit với nhánh bạn đang rebase, và cuối cùng áp dụng lần lượt các thay đổi.

.Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`.]

Đến lúc này, bạn có thể quay lại nhánh `master` và thực hiện fast-forward merge.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Fast-forwarding the master branch
image::images/basic-rebase-4.png[Fast-forwarding the master branch.]

Bây giờ snapshot mà C4' trỏ tới cũng giống như snapshot được trở tới bởi C5 trong ví dụ sử dụng merge. 
Không có sự khác biệt nào khi so sánh kết quả của hai phương pháp này, nhưng sử dụng rebase sẽ cho chúng ta lịch sử rõ ràng hơn. 
Nếu bạn xem xét lịch sử của nhánh mà chúng ta rebase vào, nó giống như một đường thẳng: mọi thứ dường như xảy ra theo trình tự, thậm chí ban đầu nó diễn ra song song.


Bình thường, bạn sử dụng cách này để đảm bảo rằng các commit được áp dụng một cách rõ ràng, rành mạch trên nhánh remote - có lẽ là một dự án mà bạn đang đóng góp chứ không phải duy trì nó. 
Trong trường hợp này, bạn thực hiện công việc trên một nhánh và sau đó rebase trở lại nhánh `origin/master` khi đã sẵn sàng. 
Theo cách này thì người duy trì dự án đó không phải thực hiện việc tích hợp - mà chỉ chi chuyển tiến lên phía trước (fast-forwar) hoặc đơn giản là áp dụng chúng vào.


Lưu ý rằng snapshot được trỏ tới bởi commit cuối cùng, cho dù nó là kết quả của việc rebase hay merge, thì nó vẫn giống nhau - chỉ khác nhau về các bước thực hiện mà thôi. 
Quá trình rebase được thực hiện bằng cách thực hiện lại các thay đổi từ nhánh này qua nhánh khác theo thứ tự chúng đã được thực hiện, trong khi đó merge lại lấy hai điểm kết thúc và gộp chúng lại với nhau.

==== Rebase Nâng Cao

Bạn cũng có thể thực hiện rebase trên một đối tượng khác mà không phải là nhánh rebase. 
Xem ví dụ ở lịch sử <<rbdiag_e>>. 
Bạn tạo một nhánh chủ để (`server`) để thêm một số tính năng server-side vào dự án, và thực hiện một số commit. 
Sau đó bạn tạo một nhánh khác để thực hiện một số thay đổi cho phía client (`client`) và cũng commit vài lần. 
Cuối cùng, bạn quay trở lại nhánh server và thực hiện thêm một số commit nữa.

[[rbdiag_e]]
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]

Giả sử bạn quyết định tích hợp các thay đổi phía client vào nhánh chính cho bản phát hành sắp tới, nhưng bạn vẫn muốn giữ các thay đổi server-side cho đến khi nó được kiểm tra kỹ lưỡng. 
Bạn có thể lấy các thay đổi ở client mà không có mặt ở server (`C8` và `C9`) sau đó chạy lại (replay) chúng trên nhánh master bằng cách sử dụng lựa chọn `--onto` cho lệnh `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Lệnh này cơ bản nói rằng, "Hãy check out nhánh client, tìm ra các bản vá từ commit chung của nhánh `client` và `server`, sau đó thực thi lại vào nhánh `master`." 
Nó hơi phức tạp một chút nhưng kết quả thì lại rất tuyệt.

.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]

Bây giờ bạn có thể di chuyển con trỏ của nhánh master tiến lên phía trước (xem <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Fast-forwarding your master branch to include the client branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]

Giả sử rằng bạn quyết định kéo về cả nhánh trên máy chủ.
Bạn có thể rebase nhánh trên máy chủ đó vào nhánh master mà không phải checkout trước bằng lệnh `git rebase [basebranch] [topicbranch]` - lệnh này sẽ checkout nhánh chủ để (trong trường hợp này là `server`) cho bạn và áp dụng lại các thay đổi vào nhánh cơ sở (base) `master`:

[source,console]
----
$ git rebase master server
----

Lệnh này sẽ thực hiện lại các thay đổi trên nhánh `server` chèn vào nhánh `master` như trong <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]

Sau đó bạn có thể di chuyển con trỏ nhánh base (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Bạn có thể xóa nhánh `client` và `server` vì tất cả công việc đã được tích hợp vào master và bạn không cần đến chúng nữa, lịch sử quả toàn bộ quá trình vừa rồi giống như <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Final commit history
image::images/interesting-rebase-5.png[Final commit history.]

[[_rebase_peril]]
==== Rủi Ro của Rebase

(((rebasing, perils of)))
Mặc dù rebase rất hữu ích nhưng nó cũng có không ít những mặt hạn chế, điều này có thể tổng kết bằng câu sau đây:

**Không được rebase các commit mà tồn tại bên ngoài kho chứa của bạn.**

Miễn là bạn làm theo hướng dẫn này, sẽ không có chuyện gì xảy ra. 
Nếu không, mọi người sẽ ghét bạn, và bạn sẽ bị bạn bè và gia đình coi thường.

Khi bạn thực hiện rebase, bạn đang bỏ đi các commit đã tồn tại và tái tạo lại các commit mới tương tự nhưng thực ra khác biệt.
Nếu bạn đẩy commit ở một nơi nào đó và mọi người kéo xuống máy của họ, sau đó bạn sửa lại các commit đó bằng lệnh `git rebase` và đẩy lên một lần nữa, đồng nghiệp của bạn sẽ phải tích hợp lại công việc của họ và mọi thứ sẽ rối tung lên khi bạn cố gắng kéo các thay đổi của họ ngược lại máy bạn.

Hãy cùng xem một ví dụ làm sao việc rebase công khai có thể gây sự cố. 
Giả sử bạn tạo bản sao từ một máy chủ trung tâm và thực hiện một số thay đổi từ đó.
Lịch sử commit của bạn sẽ giống như là:

.Tạo bản sao một kho chứa, và base một số thay đổi vào đó
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]

Bây giờ, một người khác thực hiện một số thay đổi khác có kèm theo một lần tích hợp (merge), và đẩy lên máy chủ trung tâm. 
Bạn truy xuất chúng và tích hợp nhánh trung tâm mới đó vào của bạn, lúc này lịch sử của bạn sẽ giống như:

.Truy xuất thêm các commit và tích hợp lại.
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]

Tiếp theo, người đã đẩy tích hợp đó quyết định lại và rebase lại những thay đổi của họ; họ thực hiện `git push --force` để ghi đè lịch sử trên máy chủ. 
Sau đó bạn truy xuất lại dữ liệu từ máy chủ, đưa về các commit mới.

[[_pre_merge_rebase_work]]
.Một người nào đó đẩy lên các commit rebase, bỏ đi các commit có chứa thay đổi của bạn.
image::images/perils-of-rebasing-3.png["Một người nào đó đẩy lên các commit rebase, bỏ đi các commit có chứa thay đổi của bạn."]

Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

Nếu bạn chạy lệnh `git log` trong trường hợp này bạn sẽ thấy hai commit cùng chung ngày commit và thông điệp, điều này sẽ gây khó hiểu cho bạn. 
Hơn nữa, nếu bạn đẩy chúng ngược lên máy chủ, bạn sẽ đưa vào một lần nữa tất cả các commit đã rebase đó và sẽ gây khó hiểu cho nhiều người khác nữa.

It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit. This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch. Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`. Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
