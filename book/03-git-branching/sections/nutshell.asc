[[_git_branches_overview]]
=== Tóm tắt về Nhánh

Để có thể thực sử hiểu được cách phân nhánh của Git, chúng ta cần nhìn và xem xét lại cách Git lưu trữ dữ liệu.
Như bạn đã biết từ Chương 1 <<_getting_started>>, Git không lưu trữ dữ liệu dưới dạng một chuỗi các thay đổi hoặc delta, mà thay vào đó là một chuỗi các ảnh (snapshot).

Khi bạn commit, Git lưu trữ đối tượng commit mà có chứa một con trỏ tới ảnh của nội dung bạn đã tổ chức (stage), tác giả và thông điệp, hay 0 hoặc nhiều con trỏ khác trỏ tới một hoặc nhiều commit cha trực tiếp của commit đó: commit đầu tiên không có cha, commit bình thường có một cha, và nhiều cha cho commit là kết quả được tích hợp lại từ hai hoặc nhiều nhánh.

Để hình dung ra vấn đề này, hãy giả sử bạn có một thư mục chứa ba tập tin, và bạn tổ chức tất cả chúng để commit.
Quá trình tổ chức các tập tin sẽ thực hiện băm từng tập (sử dụng mã SHA-1 được đề cập ở Chương 1 <<_getting_started>> ), lưu trữ phiên bản đó của tập tin trong kho chứa Git (Git xem chúng như là các blob), và thêm mã băm đó vào khu vực tổ chức:


[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

Lệnh `git commit` khi chạy sẽ băm tất cả các thư mục trong dự án và lưu chúng lại dưới dạng đối tượng `tree`. 
Sau đó Git tạo một đối tượng `commit` có chứa các thông tin mô tả (metadata) và một con trỏ trỏ tới đối tương `tree` gốc của dự án vì thế nó có thể tạo lại ảnh đó khi cần thiết.(((git commands, commit)))

Kho chứa Git của bạn bây giờ có chứa năm đối tượng: một blob cho nội dung của từng tập tin, một "cây" liệt kê nội dung của thư mục và chỉ rõ tên tập tin nào được lưu trữ trong blob nào, và một commit có con trỏ trỏ tới cây gốc và tất cả các thông tin mô tả commit.

.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]

Nếu bạn thực hiện một số thay đổi và commit lại thì commit tiếp theo sẽ lưu một con trỏ tới commit ngay trước nó.

.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]

Một nhánh trong Git đơn thuần là một con trỏ có khả năng di chuyển được, trỏ đến một trong những commit này.
Tên nhánh mặc định của Git là `master`. 
Như trong những lần commit đầu tiên, chúng đều được trỏ tới nhánh `master`.
Và mỗi lần bạn thực hiện commit, nó sẽ được tự động ghi vào theo hướng tiến lên. (move forward)

[NOTE]
====
Nhánh ``master'' trong Git không phải là nhánh đặc biệt gì cả(((master)))
Nó giống như những nhánh khác.
Lý do duy nhất là các kho chứa đều có nó khi lệnh `git init` tạo ra nó mặc định và hầu hết mọi người đều không thay đổi nó.
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]

[[_create_new_branch]]
==== Tạo Nhánh Mới

(((branches, creating)))
Chuyện gì xảy ra nếu bạn tạo một nhánh mới?
Làm như vậy sẽ tạo ra một con trỏ mới cho phép bạn di chuyển vòng quanh.
Ví dụ bạn tạo một nhánh mới có tên testing.
Việc này được thực hiện bằng lệnh `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Nó sẽ tạo một con trỏ mới, cùng trỏ tới commit hiện tại (mới nhất) của bạn.

.Hai nhánh cùng trỏ vào dữ liệu commit
image::images/two-branches.png[Two branches pointing into the same series of commits.]

Vậy làm sao Git có thể biết được rằng bạn đang làm việc trên nhánh nào?
Git giữ một con trỏ đặc biệt có tên HEAD.
Lưu ý khái niệm về HEAD ở đây khác biệt hoàn toàn với các VCS khác mà bạn có thể đã sử dụng qua, như là Subversion hoặc CVS.
Trong Git, đây là một con trỏ tới nhánh nội bộ mà bạn đang làm việc.
Trong trường hợp này, bạn vẫn đang trên nhánh master.
Lệnh git branch chỉ __tạo__ một nhánh mới chứ không tự chuyển sang nhánh đó cho bạn.

.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]

Bạn có thể dễ dàng điều này bàng cách chạy lệnh `git log`, nó chỉ ra nhánh nào đang được chỏ vào. Tuỳ chọn này gọi là `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

Bạn có thể thấy  nhánh ``master'' và ``testing'' ở bên phải của commit `f30ab`.

[[_switching_branches]]
==== Chuyển nhánh

(((branches, switching)))

Để chuyển sang một nhánh đang tồn tại, bạn sử dụng lệnh `git checkout`.(((git commands, checkout)))

[source,console]
----
$ git checkout testing
----

Lệnh này sẽ chuyển con trỏ HEAD sang nhánh testing.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

Ý nghĩa của việc này là gì?
Hãy cùng thực hiện một commit khác:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

Điều này thật thú vị, bởi vì nhánh testing của bạn bây giờ đã tiển hẳn lên phía trước, nhưng nhánh `master` thì vẫn trỏ tới commit ở thời điểm khi bạn chạy lệnh `git checkout` để chuyển nhánh. 
Hãy cùng chuyển trở lại nhánh `master`:

[source,console]
----
$ git checkout master
----

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]

Lệnh này vừa thực hiện hai việc.
Nó di chuyển lại con trỏ HEAD về nhánh `master`, và sau đó nó phục hồi lại các tập tin trong thư mục làm việc của bạn trở lại snapshot mà `master` trỏ tới.
Điều này cũng có nghĩa là các thay đổi bạn thực hiện từ thời điểm này trở đi sẽ tách ra so với phiên bản cũ hơn của dự án.
Nó "tua lại" các thay đổi cần thiết mà bạn đã thực hiện trên nhánh `testing` một cách tạm thời để bạn có thể đi theo một hướng khác.


[NOTE]
.Chuyển nhánh thay đổi file trong thư mục làm việc của bạn
====
Hãy chú ý rằng khi bạn chuyển nhánh trong Git, file trong thư mục làm việc của bạn sẽ thay đổi.
Khi bạn chuyển tới một nhánh cũ, thư mục làm việc của bạn sẽ hồi phục giống như lần cuối cùng bạn commit trên nhánh đó.
Nếu Git không thể thực hiện nó rõ ràng, nó không thể chuyển nhánh cho bạn.
====

Hãy cùng tạo một vài thay đổi và commit lại một lần nữa:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Bây giờ lịch sử của dự án đã bị tách ra (xem <<divergent_history>>). 
Bạn tạo mới và chuyển sang một nhánh, thực hiện một số thay đổi trên đó, và rồi chuyển ngược lại nhánh chính và tạo thêm các thay đổi khác.
Cả hai sự thay đổi này bị cô lập với nhau ở hai nhánh riêng biệt: bạn có thể chuyển đi hoặc lại giữa cách nhánh và tích hợp chúng lại với nhau khi cần thiết.
Và bạn đã thực hiện những việc trên một cách đơn giản với lệnh `branch` và `checkout` và `commit`.


[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

Bạn có thể  thấy điều này dễ dàng với lệnh `git log`.
Nếu bạn chạy `git log --oneline --decorate --graph --all` nó sẽ hiển thị lịch sử mà bạn commit, chỉ ra con trỏ tới nhánh của bạn và lịch sử phân nhánh như thế nào.


[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Bởi vì một nhánh trong Git thực tế là một tập tin đơn giản chứa một mã băm SHA-1 có độ dài 40 ký tự của commit mà nó trỏ tới, chính vì thế tạo mới cũng như hủy các nhánh đi rất đơn giản.
Tạo mới một nhánh nhanh tương đương với việc ghi 41 bytes vào một tập tin (40 ký tự cộng thêm một dòng mới).

Điều này đối lập rất lớn với cách mà các VCS khác phân nhánh, chính là copy toàn bộ các tập tin hiện có của dự án sang một thư mục thứ hai.
Việc này có thể mất khoảng vài giây, thậm chí vài phút, phụ thuộc vào dung lượng của dự án, trong khi đó trong Git thì quá trình này luôn xảy ra ngay lập tức. 
Thêm một lý do nữa là, chúng ta đang lưu trữ cha của các commit, nên việc tìm kiếm gốc/cơ sở để tích hợp lại được thực hiện một cách tự động và rất dễ dàng. 
Những tính năng này giúp khuyến khích các lập trình viên tạo và sử dụng nhánh thường xuyên hơn.

Hãy cùng xem tại sao bạn nên làm như vậy.

